# Test file for add_integer.py

import unittest

from 0_add_integer import add_integer


class TestAddInteger(unittest.TestCase):

    def test_add_integer_with_integers(self):
        """
        Test that add_integer() works correctly with integers.
        """
        self.assertEqual(add_integer(2, 3), 5)
        self.assertEqual(add_integer(2, -3), -1)

    def test_add_integer_with_floats(self):
        """
        Test that add_integer() works correctly with floats.
        """
        self.assertEqual(add_integer(2.0, 3.0), 5)
        self.assertEqual(add_integer(2.9, 0.2), 2)
        self.assertEqual(add_integer(-2.9, -0.2), -2)

    def test_add_integer_with_mixed_types(self):
        """
        Test that add_integer() works correctly with mixed types.
        """
        self.assertEqual(add_integer(2.3, -3), -1)

    def test_add_integer_with_non_numbers(self):
        """
        Test that add_integer() raises a TypeError if passed non-numbers.
        """
        with self.assertRaises(TypeError):
            add_integer("hello", 3)
        with self.assertRaises(TypeError):
            add_integer(2, "hello")
        with self.assertRaises(TypeError):
            add_integer(None)
        with self.assertRaises(TypeError):
            add_integer(2.3, None)

    def test_add_integer_with_infinity(self):
        """
        Test that add_integer() raises an OverflowError if passed infinity.
        """
        with self.assertRaises(OverflowError):
            add_integer(float('inf'))
        with self.assertRaises(OverflowError):
            add_integer(2, float('inf'))

    def test_add_integer_with_NaN(self):
        """
        Test that add_integer() raises a ValueError if passed NaN.
        """
        with self.assertRaises(ValueError):
            add_integer(float('nan'))
        with self.assertRaises(ValueError):
            add_integer(2, float('nan'))
